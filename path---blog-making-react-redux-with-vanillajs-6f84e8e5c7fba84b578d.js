webpackJsonp([0xcc18f0802bad],{330:function(n,s){n.exports={data:{markdownRemark:{html:'<p>So I wanted to make a simple prototype for a webapp thing I need to build in my thesis, and I got all excited thinking about all the cool libraries and patterns I could use to build something that is basically just Photo Booth.app... Overkill much ü§¶‚Äç‚ôÄÔ∏è</p>\n<p>After coming to the conclusion I don\'t need <em>React + (insert long list of currently popular libraries that solve a problem you don\'t have but still need to solve for some reason)</em> I set out to just make it in plain JS - nice and simple!</p>\n<p>As a bit of a challenge I wanted to make my app state-driven (e.g. in <strong>React/Redux</strong>, if the state changes the relevant components/subscribers get updated). This was something I\'ve always enjoyed about React so I thought it would be fun to roll my own version of it (don\'t worry, I\'m not making another JS framework üò¨).</p>\n<p>This was the hacky solution I came up with:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// Global store</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token punctuation">{</span>\n\tmyone<span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span>\n\n\t<span class="token comment">// Key containing some todos data</span>\n\ttodos<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\ttext<span class="token punctuation">:</span> <span class="token string">\'My first todo\'</span><span class="token punctuation">,</span>\n\t\t\tcompleted<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\ttext<span class="token punctuation">:</span> <span class="token string">\'Another todo that I have done\'</span><span class="token punctuation">,</span>\n\t\t\tcompleted<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n\totherData<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n\tandSomeMore<span class="token punctuation">:</span> <span class="token string">\'1\'</span><span class="token punctuation">,</span>\n\t\n\t<span class="token comment">// Listeners to notify based on updates to particular keys</span>\n\tlisteners<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\n\t<span class="token comment">/*\n\t*  Subscribe a function to "listen" to any changes made to the store[key] data\n\t*  @param keys - single string key or an array of keys to listen to\n\t*  @param listener - function to call when data changes\n\t*/</span>\n\tsubscribe<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> arrKeys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span>\n\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> arrKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\n\t<span class="token comment">/*\n\t*  Update data in the store and notify any relevant listeners.\n\t*  @param key - key to update in the store\n\t*  @param data - data to place at that key\n\t*/</span>\n\tupdate<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>key <span class="token keyword">in</span> store<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tconsole<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Key: (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) not in store object`</span></span><span class="token punctuation">)</span>\n\t\t\t<span class="token keyword">return</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Attempted updating store with the same state\'</span><span class="token punctuation">)</span>\n\t\t\t<span class="token keyword">return</span>\n\t\t<span class="token punctuation">}</span>\n\n\t\tstore<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> data\n\t\n\t\t<span class="token comment">// Call all listeners of this key</span>\n\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> listener <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Simple but shortsighted, I don\'t handle adding new keys, prevent direct mutation of the store, handle actions nicely with reducers etc. But we can update the todos data using <code class="language-text">update()</code> and expect all listeners to be notified about it, we can use this then to re-render the "components"!</p>\n<p>So below is an example of the very basic "component" structure that I used. Key parts namely are the reference to the node in the DOM (if it had one) and the render function which returns a HTML string.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// Component (you could do this using a class)</span>\n<span class="token keyword">const</span> TodoList <span class="token operator">=</span> <span class="token punctuation">{</span>\n\n\t<span class="token comment">// DOM element the component connects to on the html page</span>\n\telem<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'todo_list\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\n\t<span class="token comment">// Replace element with newly rendered html</span>\n\tupdate<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\n\t<span class="token comment">// Genreate HTML string representing element</span>\n\trender<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;ul>\n\t\t\t${store.todos.map((t, i) => `</span></span><span class="token operator">&lt;</span>li<span class="token operator">></span>$<span class="token punctuation">{</span>Todo<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token template-string"><span class="token string">`).join(\'\')}\n\t\t&lt;/ul>`</span></span>\t<span class="token comment">// Hmmm. The highlighter breaks on nested template literals...</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\nTodoList<span class="token punctuation">.</span>update <span class="token operator">=</span> TodoList<span class="token punctuation">.</span>update<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>TodoList<span class="token punctuation">)</span>\n\n<span class="token comment">// Subscribe to the \'todos\' data, call update() everytime it gets updated</span>\nstore<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">\'todos\'</span><span class="token punctuation">,</span> TodoList<span class="token punctuation">.</span>update<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>As you can see I use <code class="language-text">store.subscribe()</code> to listen to the <code class="language-text">&#39;todos&#39;</code> key and call the <code class="language-text">TodoList.update()</code> function every time there is a change. Simple right!</p>\n<p>So what does this actually mean, well anywhere else in my code I can call <code class="language-text">store.update()</code> and expect that any re-rendering will be automatically triggered.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// Add a new todo to the store</span>\nstore<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">\'todos\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\t<span class="token operator">...</span>store<span class="token punctuation">.</span>todos<span class="token punctuation">,</span>\n\t<span class="token punctuation">{</span>\n\t\ttext<span class="token punctuation">:</span> <span class="token string">\'A new todo item\'</span><span class="token punctuation">,</span>\n\t\tcompleted<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// Magic happens and things re-render! üéâ</span></code></pre>\n      </div>\n<p>Anyways, the prototype was actually pretty quick to build this way. I think it was rather useful to build something like this from scratch and form your own patterns to understand the design decisions behind some of these awesome libraries/frameworks that are available now.</p>\n<p>That\'s me done for now, have a wonderful day! üåà</p>',frontmatter:{date:"April 17, 2018",path:"/blog/making-react+redux-with-vanillajs",title:"Making React + Redux in VanillaJS (kind of)"}}},pathContext:{}}}});
//# sourceMappingURL=path---blog-making-react-redux-with-vanillajs-6f84e8e5c7fba84b578d.js.map