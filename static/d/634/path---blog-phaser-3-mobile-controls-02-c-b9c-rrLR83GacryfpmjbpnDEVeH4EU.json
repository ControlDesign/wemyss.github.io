{"data":{"markdownRemark":{"html":"<h1>Overiew</h1>\n<p>So when building my snowboarding game for university, I decided at the last minute to add mobile support. All I had to add was the controls, as I fixed the scaling of the game UI enough that it rendered ok on mobile. Touch events for buttons on the menu and in-game worked fine, but there was no way to use WASD or arrow keys on mobile so I needed to make something custom for mobile devices!</p>\n<h1>Goals</h1>\n<ul>\n<li>Controls only display and only work on touch devices</li>\n<li>Change as little of the current game logic as possible</li>\n</ul>\n<h1>Method</h1>\n<h4>0. Initial setup</h4>\n<p>So firstly you should already have your keyboard layout for desktops defined in your scene <code class=\"language-text\">create</code> method like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cursors <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span>keyboard<span class=\"token punctuation\">.</span><span class=\"token function\">addKeys</span><span class=\"token punctuation\">(</span><span class=\"token string\">'W,A,S,D'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// or</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cursors <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span>keyboard<span class=\"token punctuation\">.</span><span class=\"token function\">createCursorKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Then in your <code class=\"language-text\">update</code> method for the scene you would check the actions for the keycodes you are listening to like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cursors\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>isDown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tplayer<span class=\"token punctuation\">.</span><span class=\"token function\">moveLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>isDown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tplayer<span class=\"token punctuation\">.</span><span class=\"token function\">moveRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>up<span class=\"token punctuation\">.</span>isDown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// do something</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>down<span class=\"token punctuation\">.</span>isDown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// do something</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>1. Check if mobile</h4>\n<p>So in your scene <code class=\"language-text\">create</code> method where you define your keycodes, add an if-else statement around it. Building the mobile controls if the device is a touch device, otherwise stick to the original keyboard controls you had.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sys<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span>touch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cursors <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span>keyboard<span class=\"token punctuation\">.</span><span class=\"token function\">createCursorKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">buildMobileControls</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>2. Build mobile controls</h4>\n<p><code class=\"language-text\">this.buildMobileControls</code> isn't actually implemented, so we need to do that! Basically what we want this function to do is to listen to touch events and mutate <code class=\"language-text\">this.cursors</code> much in the same way keyboard events would. Therefore we need to create <code class=\"language-text\">this.cursors</code> to have the same structure as the desktop version - <em>\"an object containing Key objects mapped to the input properties\"</em>.</p>\n<p>Since for my game I was only using the <code class=\"language-text\">isDown</code> property of the keycodes I simply mimicked this, and chose to ignore the rest of the properties.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">buildMobileControls<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">//</span> Found this helps <span class=\"token keyword\">with</span> multiple buttons being pressed at the same time on mobile\n\tthis<span class=\"token punctuation\">.</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">.</span>addPointer<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token operator\">//</span> Only emitting events <span class=\"token keyword\">from</span> the top<span class=\"token operator\">-</span>most Game Objects <span class=\"token keyword\">in</span> the Display List<span class=\"token punctuation\">.</span>\n\t<span class=\"token operator\">//</span> Mainly useful <span class=\"token keyword\">if</span> you have <span class=\"token string\">\"background\"</span> button zones <span class=\"token operator\">and</span> you only want \n\t<span class=\"token operator\">//</span> one to be triggered on a single tap<span class=\"token punctuation\">.</span>\n\tthis<span class=\"token punctuation\">.</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">.</span>topOnly <span class=\"token operator\">=</span> true\n\t\n\t<span class=\"token operator\">//</span> Create an <span class=\"token builtin\">object</span> mimicking what the keyboard version would be<span class=\"token punctuation\">.</span>\n\t<span class=\"token operator\">//</span> We are going to modify this on touch events so we can check <span class=\"token keyword\">in</span> our update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> loop\n\tthis<span class=\"token punctuation\">.</span>cursors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">'up'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'left'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'right'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'down'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token operator\">//</span> keyboard listeners to be user <span class=\"token keyword\">for</span> each key\n\tconst pointerDown <span class=\"token operator\">=</span> key <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">//</span> modifies this<span class=\"token punctuation\">.</span>cursors <span class=\"token keyword\">with</span> the <span class=\"token builtin\">property</span> that we check <span class=\"token keyword\">in</span> update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> method\n\t\tthis<span class=\"token punctuation\">.</span>cursors<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isDown <span class=\"token operator\">=</span> true\n\t<span class=\"token punctuation\">}</span>\n\tconst pointerUp <span class=\"token operator\">=</span> key <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\tthis<span class=\"token punctuation\">.</span>cursors<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isDown <span class=\"token operator\">=</span> false\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token operator\">//</span> button sizing\n\tconst WIDTH <span class=\"token operator\">=</span> <span class=\"token number\">167</span>\n\tconst HEIGHT <span class=\"token operator\">=</span> <span class=\"token number\">153</span>\n\n\t<span class=\"token operator\">//</span> gutter width between buttons\n\tconst GUTTER <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n\t\n\n\t<span class=\"token operator\">//</span> Create a button helper\n\tconst createBtn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> width<span class=\"token operator\">=</span>WIDTH<span class=\"token punctuation\">,</span> height<span class=\"token operator\">=</span>HEIGHT<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">//</span> Add a faded out red rectangle <span class=\"token keyword\">for</span> our button\n\t\tthis<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">.</span>rectangle<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> <span class=\"token number\">0xff0000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.07</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span>setOrigin<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span>setScrollFactor<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span>setInteractive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">(</span><span class=\"token string\">'pointerdown'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> pointerDown<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">(</span><span class=\"token string\">'pointerup'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> pointerUp<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token operator\">//</span> Y coordinate to place buttons\n\tconst BTN_Y <span class=\"token operator\">=</span> GAME_HEIGHT <span class=\"token operator\">-</span> HEIGHT <span class=\"token operator\">-</span> GUTTER\n\n\t<span class=\"token operator\">//</span> create player control buttons\n\tcreateBtn<span class=\"token punctuation\">(</span>\n\t\t<span class=\"token string\">'left'</span><span class=\"token punctuation\">,</span> \n\t\tGUTTER<span class=\"token punctuation\">,</span> \n\t\tBTN_Y\n\t<span class=\"token punctuation\">)</span>\n\tcreateBtn<span class=\"token punctuation\">(</span>\n\t\t<span class=\"token string\">'right'</span><span class=\"token punctuation\">,</span>\n\t\tWIDTH <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>GUTTER<span class=\"token punctuation\">,</span> \n\t\tBTN_Y\n\t<span class=\"token punctuation\">)</span>\n\tcreateBtn<span class=\"token punctuation\">(</span>\n\t\t<span class=\"token string\">'up'</span><span class=\"token punctuation\">,</span>\n\t\tGAME_WIDTH <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>WIDTH <span class=\"token operator\">+</span> GUTTER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n\t\tBTN_Y\n\t<span class=\"token punctuation\">)</span>\n\tcreateBtn<span class=\"token punctuation\">(</span>\n\t\t<span class=\"token string\">'down'</span><span class=\"token punctuation\">,</span>\n\t\tGAME_WIDTH <span class=\"token operator\">-</span> WIDTH <span class=\"token operator\">-</span> GUTTER<span class=\"token punctuation\">,</span> \n\t\tBTN_Y\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By now the controls should looks something like this:</p>\n<p>IMAGE HERE</p>\n<p>Note that if you need the x and y coordinates of where abouts the user touched the <code class=\"language-text\">pointerup</code> and <code class=\"language-text\">pointerdown</code> events pass the parameters <code class=\"language-text\">pointer, localX, localY, event</code> to the callback function (if you need world coordinates of the touch event use <code class=\"language-text\">pointer.worldX</code> and <code class=\"language-text\">pointer.worldY</code>). I used this for the green zone surrounding the red boxes in the screenshot above to place ramps at the where x coordinate where the user touches.</p>\n<h4>3. Pretty pictures</h4>\n<p>We can change these rectangles to something that makes a little more sense such as arrow key pictures:</p>\n<p>IMAGE HERE</p>\n<p>To do this simply change the <code class=\"language-text\">createBtn</code> helper to instead of calling <code class=\"language-text\">this.add.rectangle</code>, call <code class=\"language-text\">this.add.image</code> and adjust the origin, alpha, etc. accordingly using the api.</p>","frontmatter":{"date":"October 29, 2018","path":"/blog/phaser-3-mobile-controls","title":"Phaser 3 mobile controls"}}},"pageContext":{}}