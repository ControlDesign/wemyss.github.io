{"data":{"markdownRemark":{"html":"<h1>Overiew</h1>\n<p>So when building my snowboarding game for university, I decided at the last minute to add mobile support. All I had to add was the controls, as I fixed the scaling of the game UI enough that it rendered ok on mobile. Touch events for buttons on the menu and in-game worked fine, but there was no way to use WASD or arrow keys on mobile so I needed to make something custom for mobile devices!</p>\n<h1>Goals</h1>\n<ul>\n<li>Controls only display and only work on touch devices</li>\n<li>Change as little of the current game logic as possible</li>\n</ul>\n<h1>Method</h1>\n<h4>0. Initial setup</h4>\n<p>So firstly you should already have your keyboard layout for desktops defined in your scene <code class=\"language-text\">create</code> method like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cursors <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span>keyboard<span class=\"token punctuation\">.</span><span class=\"token function\">addKeys</span><span class=\"token punctuation\">(</span><span class=\"token string\">'W,A,S,D'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// or</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cursors <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span>keyboard<span class=\"token punctuation\">.</span><span class=\"token function\">createCursorKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Then in your <code class=\"language-text\">update</code> method for the scene you would check the actions for the keycodes you are listening to like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cursors\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>isDown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tplayer<span class=\"token punctuation\">.</span><span class=\"token function\">moveLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>isDown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tplayer<span class=\"token punctuation\">.</span><span class=\"token function\">moveRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>up<span class=\"token punctuation\">.</span>isDown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// do something</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>down<span class=\"token punctuation\">.</span>isDown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// do something</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>1. Check if mobile</h4>\n<p>So in your scene <code class=\"language-text\">create</code> method where you define your keycodes, add an if-else statement around it. Building the mobile controls if the device is a touch device, otherwise stick to the original keyboard controls you had.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sys<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span>touch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cursors <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span>keyboard<span class=\"token punctuation\">.</span><span class=\"token function\">createCursorKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">buildMobileControls</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>2. Build mobile controls</h4>\n<p><code class=\"language-text\">buildMobileControls</code> isn't actually implemented, so we need to do that! Basically what we want this function to do is to listen to touch events and mutate <code class=\"language-text\">this.cursors</code> much in the same way keyboard events would. Therefore we need to create <code class=\"language-text\">this.cursors</code> to have the same structure as the desktop version - <em>\"an object containing Key objects mapped to the input properties\"</em>.</p>\n<p>Since for my game I was only using the <code class=\"language-text\">isDown</code> property of the keycodes I simply mimicked this, and chose to ignore the rest of the properties.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">functionbuildMobileControls</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Found this helps with multiple buttons being pressed at the same time on mobile</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">addPointer</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Only emitting events from the top-most Game Objects in the Display List.</span>\n\t<span class=\"token comment\">// Mainly useful if you have \"background\" button zones and you only want </span>\n\t<span class=\"token comment\">// one to be triggered on a single tap.</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span>topOnly <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\n\t<span class=\"token comment\">// Create an object mimicking what the keyboard version would be.</span>\n\t<span class=\"token comment\">// We are going to modify this on touch events so we can check in our update() loop</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cursors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">'up'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'left'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'right'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'down'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\">// keyboard listeners to be user for each key</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">pointerDown</span> <span class=\"token operator\">=</span> key <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// modifies this.cursors with the property that we check in update() method</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cursors<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isDown <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">pointerUp</span> <span class=\"token operator\">=</span> key <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cursors<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isDown <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\">// button sizing</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token constant\">WIDTH</span> <span class=\"token operator\">=</span> <span class=\"token number\">167</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token constant\">HEIGHT</span> <span class=\"token operator\">=</span> <span class=\"token number\">153</span>\n\n\t<span class=\"token comment\">// gutter width between buttons</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token constant\">GUTTER</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n\t\n\n\t<span class=\"token comment\">// Create a button helper</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createBtn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> width<span class=\"token operator\">=</span><span class=\"token constant\">WIDTH</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">=</span><span class=\"token constant\">HEIGHT</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Add a faded out red rectangle for our button</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> <span class=\"token number\">0xff0000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.07</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">setOrigin</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">setScrollFactor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">setInteractive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pointerdown'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">pointerDown</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pointerup'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">pointerUp</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\">// Y coordinate to place buttons</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token constant\">BTN_Y</span> <span class=\"token operator\">=</span> <span class=\"token constant\">GAME_HEIGHT</span> <span class=\"token operator\">-</span> <span class=\"token constant\">HEIGHT</span> <span class=\"token operator\">-</span> <span class=\"token constant\">GUTTER</span>\n\n\t<span class=\"token comment\">// create player control buttons</span>\n\t<span class=\"token function\">createBtn</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token string\">'left'</span><span class=\"token punctuation\">,</span> \n\t\t<span class=\"token constant\">GUTTER</span><span class=\"token punctuation\">,</span> \n\t\t<span class=\"token constant\">BTN_Y</span>\n\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">createBtn</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token string\">'right'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token constant\">WIDTH</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token constant\">GUTTER</span><span class=\"token punctuation\">,</span> \n\t\t<span class=\"token constant\">BTN_Y</span>\n\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">createBtn</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token string\">'up'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token constant\">GAME_WIDTH</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token constant\">WIDTH</span> <span class=\"token operator\">+</span> <span class=\"token constant\">GUTTER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n\t\t<span class=\"token constant\">BTN_Y</span>\n\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">createBtn</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token string\">'down'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token constant\">GAME_WIDTH</span> <span class=\"token operator\">-</span> <span class=\"token constant\">WIDTH</span> <span class=\"token operator\">-</span> <span class=\"token constant\">GUTTER</span><span class=\"token punctuation\">,</span> \n\t\t<span class=\"token constant\">BTN_Y</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By now the controls should looks something like this:</p>\n<p>IMAGE HERE</p>\n<p>Note that if you need the x and y coordinates of where abouts the user touched the <code class=\"language-text\">pointerup</code> and <code class=\"language-text\">pointerdown</code> events pass the parameters <code class=\"language-text\">pointer, localX, localY, event</code> to the callback function (if you need world coordinates of the touch event use <code class=\"language-text\">pointer.worldX</code> and <code class=\"language-text\">pointer.worldY</code>). I used this for the green zone surrounding the red boxes in the screenshot above to place ramps at the where x coordinate where the user touches.</p>\n<h4>3. Pretty pictures</h4>\n<p>We can change these rectangles to something that makes a little more sense such as arrow key pictures:</p>\n<p>IMAGE HERE</p>\n<p>To do this simply change the <code class=\"language-text\">createBtn</code> helper to instead of calling <code class=\"language-text\">this.add.rectangle</code>, call <code class=\"language-text\">this.add.image</code> and adjust the origin, alpha, etc. accordingly using the api.</p>","frontmatter":{"date":"October 29, 2018","path":"/blog/phaser-3-mobile-controls","title":"Phaser 3 mobile controls"}}},"pageContext":{}}